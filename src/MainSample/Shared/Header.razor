@using System.Diagnostics
@using System.Text.Json
@using MainSample.Model;

<MCard>
    <MTabs Dark BackgroundColor="teal darken-3" ShowArrows="@(true)" SliderColor="teal lighten-3" Value="selectModel.Herf">
        <MTab>
            <MAppBarNavIcon @onclick="()=>drawer=true"></MAppBarNavIcon>
        </MTab>
        @foreach (var item in HeaderListModel)
        {
            <MTab Value="@item.Herf" Href="@item.Herf" OnClick="() => OnClick(item)">@item.Title</MTab>
        }
    </MTabs>
</MCard>
<MNavigationDrawer @bind-Value="drawer"
                   Absolute
                   Temporary>
    <MList Nav
           Dense>
        <MListItemGroup @bind-Value="group"
                        ActiveClass="deep-purple--text text--accent-4">

            @foreach (var item in HeaderListModel)
            {
                <MListItem Value="@item.Herf" Href="@item.Herf" OnClick="() => OnClick(item)">
                    <MListItemIcon>
                        <MIcon>@item.Icon</MIcon>
                    </MListItemIcon>
                    <MListItemTitle>@item.Title</MListItemTitle>
                </MListItem>
            }

        </MListItemGroup>
    </MList>
</MNavigationDrawer>

<MCard Flat Style="height:100%">
    <div @ontouchmove="TouchMove" @ontouchstart="TouchStart" @ontouchend="TouchEnd" @onmousedown="Mousedown" @onmousemove="Mousemove" @onmouseup="Mouseup" style="height: 100%">
        @ChildContent
    </div>
</MCard>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public List<HeaderListModel> HeaderListModel { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    private HeaderListModel selectModel;

    /// <summary>
    /// 开始X坐标
    /// </summary>
    private double _startX;

    /// <summary>
    /// 是否显示抽屉
    /// </summary>
    private bool drawer;

    /// <summary>
    /// 当前选择
    /// </summary>
    StringNumber group;

    #region 移动端滑动处理


    private void TouchStart(TouchEventArgs args)
    {
        var touch = args.ChangedTouches[0];
        _startX = touch.ScreenX;
    }

    private void TouchMove(TouchEventArgs args)
    {

    }

    private void TouchEnd(TouchEventArgs args)
    {
        var index = HeaderListModel.IndexOf(selectModel);
        // 限制过度滑动
        if (index == HeaderListModel.Count || index > HeaderListModel.Count || args.ChangedTouches.Length == 0)
        {
            return;
        }
        var touch = args.ChangedTouches[0];

        // 需要滑动80才切换 如果开始坐标x大于 当前结束的x坐标往右边切换tab
        if ((decimal)_startX - 140 > (decimal)touch.ScreenX)
        {
            // 如果右边往左边滑动 当前索引是当前最大数量的话不需要切换
            if (index == HeaderListModel.Count - 1)
            {
                return;
            }
            selectModel = HeaderListModel[index + 1];
            NavigationManager.NavigateTo(selectModel.Herf);
        }
        else if ((decimal)_startX + 140 < (decimal)touch.ScreenX)
        {
            // 如果左边往右边滑动 当前索引是0的话不需要切换
            if (index == 0)
            {
                return;
            }
            selectModel = HeaderListModel[index - 1];
            NavigationManager.NavigateTo(selectModel.Herf);
        }

    }

    #endregion

    #region PC滑动处理


    private void Mousedown(MouseEventArgs args)
    {
        _startX = args.ScreenX;
    }

    private void Mousemove(MouseEventArgs args)
    {

    }

    private void Mouseup(MouseEventArgs args)
    {
        var index = HeaderListModel.IndexOf(selectModel);
        // 限制过度滑动
        if (index == HeaderListModel.Count || index > HeaderListModel.Count)
        {
            return;
        }

        // 需要滑动200才切换 如果开始坐标x大于 当前结束的x坐标往右边切换tab
        if ((decimal)_startX - 200 > (decimal)args.ScreenX)
        {
            // 如果右边往左边滑动 当前索引是当前最大数量的话不需要切换
            if (index == HeaderListModel.Count - 1)
            {
                return;
            }
            selectModel = HeaderListModel[index + 1];
            NavigationManager.NavigateTo(selectModel.Herf);
        }
        else if ((decimal)_startX + 200 < (decimal)args.ScreenX)
        {
            // 如果左边往右边滑动 当前索引是0的话不需要切换
            if (index == 0)
            {
                return;
            }
            selectModel = HeaderListModel[index - 1];
            NavigationManager.NavigateTo(selectModel.Herf);
        }
    }

    #endregion

    private void OnClick(HeaderListModel model)
    {
        selectModel = model;
    }

    protected override void OnInitialized()
    {
        HeaderListModel = new List<HeaderListModel>()
        {
            new ()
            {
                Title="首页",
                Herf = "/",
                Icon="mdi-home"
            },
            new ()
            {
                Title="拍照示例",
                Herf = "/take-photos",
                Icon="mdi-camera-iris"
            },
            new ()
            {
                Title = "蓝牙",
                Herf = "/bluetooth",
                Icon="mdi-bluetooth"
            },
            new ()
            {
                Title = "视频",
                Herf = "/video",
                Icon="mdi-video-vintage"
            },new ()
            {
                Title = "关于",
                Herf = "/regards",
                Icon="mdi-google-ads"
            }
        };

        selectModel = HeaderListModel[0];

        base.OnInitialized();
    }
}